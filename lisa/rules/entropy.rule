def get_entropy_command(cov, dtype, new_h5_count):
    frame="lisa_rank_tfs entropy --species {params.species}  --epigenome {wildcards.epigenome} --coefficient {input.coef} --background {input.background} --foreground {input.foreground} --prefix {params.prefix} --dtype %s " % dtype
    if cov:
        frame+=" --covariates=True "
    else:
        frame+=" --covariates=False "

    if new_h5_count != None:
        frame+=" --new_h5 %s " % new_h5_count
    if new_h5_count == None:
        frame+=" --new_h5=None "
    return frame


rule lisa_entropy_motif_99:
    input:
        coef="{sample}.{epigenome}.coefs.csv",
        background = "{sample}.background_gene.300",
        foreground="{sample}.foreground_gene"
    output:
        "{sample}.{epigenome}.motif99.entropy_rank.csv"
    message: "lisa cluster motif KL divergene ..."
    benchmark:
        "{sample}.{epigenome}.motif99.entropy.benchmark.txt"
    log: "{sample}.log"
    params: species=config["species"], prefix="{sample}"
    shell:
        get_entropy_command(config['covariates'], 'motif99', config['new_count_h5'])

rule lisa_entropy_chipseqpeak:
    input:
        coef="{sample}.{epigenome}.coefs.csv",
        background = "{sample}.background_gene.300",
        foreground="{sample}.foreground_gene"
    output:
        "{sample}.{epigenome}.chipseq.entropy_rank.csv"
    message: "lisa cluster chip-seq KL divergene ..."
    benchmark:
        "{sample}.{epigenome}.chipseq.entropy.benchmark.txt"
    log: "{sample}.log"
    params: species=config["species"], prefix="{sample}",
    shell:
        get_entropy_command(config['covariates'], 'chipseq', config['new_count_h5'])
